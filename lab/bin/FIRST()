%{
#include<stdio.h>
#include<ctype.h>
#include<string.h>

void FIRST(char[], char);
void addToResultSet(char[], char);
int numOfProductions;
char productionSet[10][10];
%}

%%
[A-Z] { printf("%s is a non-terminal\n", yytext); }
[a-z] { printf("%s is a terminal\n", yytext); }
"$" { printf("Epsilon\n"); }
"=" { printf("Production rule\n"); }
. { printf("Unrecognized character: %s\n", yytext); }
%%

int yywrap()
{
return 1;
}

void FIRST(char *Result, char c) {
    int i, j, k;
    char subResult[20];
    int foundEpsilon;
    subResult[0] = '\0';
    Result[0] = '\0';

    if (!isupper(c)) {
        addToResultSet(Result, c);
        return;
    }

    for (i = 0; i < numOfProductions; i++) {
        if (productionSet[i][0] == c) {
            if (productionSet[i][2] == '$') {
                addToResultSet(Result, '$');
            } else {
                j = 2;
                while (productionSet[i][j] != '\0') {
                    foundEpsilon = 0;
                    FIRST(subResult, productionSet[i][j]);
                    for (k = 0; subResult[k] != '\0'; k++) {
                        addToResultSet(Result, subResult[k]);
                    }
                    for (k = 0; subResult[k] != '\0'; k++) {
                        if (subResult[k] == '$') {
                            foundEpsilon = 1;
                            break;
                        }
                    }
                    if (!foundEpsilon) break;
                    j++;
                }
            }
        }
    }
}

void addToResultSet(char Result[], char val) {
    int k;
    for (k = 0; Result[k] != '\0'; k++) {
        if (Result[k] == val) return;
    }
    Result[k] = val;
    Result[k + 1] = '\0';
}

int main() {
    printf("How many number of productions? : ");
    scanf("%d", &numOfProductions);
    for (int i = 0; i < numOfProductions; i++) {
        printf("Enter production Number %d: ", i + 1);
        scanf("%s", productionSet[i]);
    }
    
    char c, result[20];
    char choice;
    do {
        printf("\nFind the FIRST of: ");
        scanf(" %c", &c);
        FIRST(result, c);
        printf("\nFIRST(%c) = { ", c);
        for (int i = 0; result[i] != '\0'; i++) {
            printf(" %c ", result[i]);
        }
        printf("}\n");
        printf("Press 'y' to continue: ");
        scanf(" %c", &choice);
    } while (choice == 'y' || choice == 'Y');
    return 0;
}
