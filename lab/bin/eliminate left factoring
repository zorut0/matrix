%{
#include<stdio.h>
#include<string.h>
#define SIZE 10
%}

%%
[A-Z] { printf("%s is a non-terminal\n", yytext); }
[a-z] { printf("%s is a terminal\n", yytext); }
"->" { printf("Production rule\n"); }
"|" { printf("Alternative rule\n"); }
. { printf("Unrecognized character: %s\n", yytext); }
%%

int yywrap() {
    return 1;
}

int main() {
    char gram[20], part1[20], part2[20], modifiedGram[20], newGram[20];
    int i, j = 0, k = 0, l = 0, pos;
    
    printf("Enter Production: S->");
    fgets(gram, sizeof(gram), stdin);
    
    for(i = 0; gram[i] != '|' && gram[i] != '\0'; i++, j++)
        part1[j] = gram[i];
    part1[j] = '\0';
    
    if (gram[i] == '|') {
        j = ++i;
        i = 0;
        for(; gram[j] != '\0'; j++, i++)
            part2[i] = gram[j];
        part2[i] = '\0';
    } else {
        printf("No common prefix found.");
        return 0;
    }
    
    for(i = 0; part1[i] == part2[i]; i++) {
        modifiedGram[k] = part1[i];
        k++;
        pos = i + 1;
    }
    
    modifiedGram[k] = 'X';
    modifiedGram[++k] = '\0';
    
    for(i = pos, j = 0; part1[i] != '\0'; i++, j++)
        newGram[j] = part1[i];
    newGram[j++] = '|';
    
    for(i = pos; part2[i] != '\0'; i++, j++)
        newGram[j] = part2[i];
    newGram[j] = '\0';
    
    printf("\nS->%s", modifiedGram);
    printf("\nX->%s\n", newGram);
    return 0;
}
